[{"D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\App.tsx":"1","D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\hooks\\AuthContext.tsx":"2","D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\pages\\Student\\index.tsx":"3","D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\pages\\Plans\\index.tsx":"4","D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\components\\Skeleton\\SpaceBetween\\index.tsx":"5","D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\components\\Drawer\\styles.ts":"6","D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\pages\\Exercises\\index.tsx":"7","D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\pages\\Exercises\\styles.ts":"8","D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\components\\ModalAddExercise\\index.tsx":"9","D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\components\\ModalAddExercise\\styles.ts":"10","D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\components\\ModalAddStudent\\index.tsx":"11","D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\components\\Modal\\index.tsx":"12","D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\pages\\Training\\styles.ts":"13","D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\components\\ButtonIcon\\index.tsx":"14","D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\components\\NewInput\\styles.ts":"15","D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\components\\Skeleton\\Item\\index.tsx":"16","D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\components\\CircularProgress\\styles.ts":"17"},{"size":625,"mtime":1620704445416,"results":"18","hashOfConfig":"19"},{"size":2198,"mtime":1622951284415,"results":"20","hashOfConfig":"19"},{"size":7635,"mtime":1629241971760,"results":"21","hashOfConfig":"19"},{"size":6434,"mtime":1629169703293,"results":"22","hashOfConfig":"19"},{"size":275,"mtime":1623990940467,"results":"23","hashOfConfig":"19"},{"size":752,"mtime":1622433013466,"results":"24","hashOfConfig":"19"},{"size":3375,"mtime":1629343085139,"results":"25","hashOfConfig":"19"},{"size":2087,"mtime":1629242928920,"results":"26","hashOfConfig":"19"},{"size":3200,"mtime":1629342874653,"results":"27","hashOfConfig":"19"},{"size":608,"mtime":1629241971739,"results":"28","hashOfConfig":"19"},{"size":6490,"mtime":1629259531850,"results":"29","hashOfConfig":"19"},{"size":877,"mtime":1629343177776,"results":"30","hashOfConfig":"19"},{"size":2210,"mtime":1622952035038,"results":"31","hashOfConfig":"19"},{"size":451,"mtime":1619980611085,"results":"32","hashOfConfig":"19"},{"size":975,"mtime":1623529258158,"results":"33","hashOfConfig":"19"},{"size":253,"mtime":1624116568323,"results":"34","hashOfConfig":"19"},{"size":593,"mtime":1619980611091,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vmb0wv",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\App.tsx",[],"D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\hooks\\AuthContext.tsx",[],"D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\pages\\Student\\index.tsx",["73","74"],"/* eslint-disable no-nested-ternary */\nimport { formatISO } from 'date-fns';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { IoMdArrowRoundBack } from 'react-icons/io';\nimport { useHistory } from 'react-router';\nimport Button from '../../components/ButtonRod';\nimport CardStudent from '../../components/CardStudent';\nimport Header from '../../components/Header';\nimport MenuBar from '../../components/MenuBar';\nimport ModalAddStudent from '../../components/ModalAddStudent';\nimport ModalConfirmationDeleteStudent from '../../components/ModalConfirmationDeleteStudent';\nimport SearchInput from '../../components/SearchInput';\nimport Tabs from '../../components/TabsStudents';\nimport { useDebounce } from '../../hooks/Debounce';\nimport api from '../../services/api';\nimport SkeletonContainerGrid from './components/SkeletonContainerGrid';\nimport {\n  ActionArea,\n  Container,\n  ContainerCardsStudents,\n  HeaderContent,\n  ListStudentEmpty,\n  Main,\n  Result,\n} from './styles';\n\ninterface StudentProps {\n  id: string;\n  full_name: string;\n  cpf: string;\n  date_of_birth: string;\n  active: boolean;\n  email: string;\n  phone: string;\n  password: string;\n  last_acess: string;\n  photo: string;\n  plan_type: string;\n  observation: string;\n}\n\n// const currentDate = JSON.stringify(new Date());\n\nconst Student: React.FC = () => {\n  const [users, setUsers] = useState<StudentProps[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedStudent, setSelectedStudent] = useState<StudentProps>(\n    {} as StudentProps,\n  );\n  const history = useHistory();\n\n  async function filterUsers(name?: string): Promise<void> {\n    setIsLoading(true);\n    updateStudents(String(name));\n    setIsLoading(false);\n  }\n\n  const handleResetUser = useCallback(() => {\n    setSelectedStudent({} as StudentProps);\n  }, []);\n\n  const [modalOpen, setModalOpen] = useState(false);\n  const [modalConfirmationOpen, setModalConfirmationOpen] = useState(false);\n\n  const studentType = [\n    { id: '1', description: 'Todos' },\n    { id: '2', description: 'Ativos' },\n    { id: '3', description: 'Inativos' },\n  ];\n\n  const [filterSelectedTypeStudent, setFilterSelectedTypeStudent] = useState(\n    studentType[0].description,\n  );\n  const updateStudents = useCallback(\n    async (name?: string) => {\n      if (filterSelectedTypeStudent === 'Todos') {\n        if (name === 'undefined') {\n          await api.get(`/users`).then(response => {\n            setUsers(response.data);\n          });\n        } else {\n          await api.get(`/users/filter-users?name=${name}`).then(response => {\n            setUsers(response.data);\n          });\n        }\n      } else if (filterSelectedTypeStudent === 'Ativos') {\n        if (name === 'undefined') {\n          await api.get(`/users/filter-users?active=true`).then(response => {\n            setUsers(response.data);\n          });\n        } else {\n          await api\n            .get(`/users/filter-users?name=${name}&active=true`)\n            .then(response => {\n              setUsers(response.data);\n            });\n        }\n      } else if (filterSelectedTypeStudent === 'Inativos') {\n        if (name === 'undefined') {\n          await api.get(`/users/filter-users?active=false`).then(response => {\n            setUsers(response.data);\n          });\n        } else {\n          await api\n            .get(`users/filter-users?name=${name}&active=false`)\n            .then(response => {\n              setUsers(response.data);\n            });\n        }\n      }\n    },\n    [filterSelectedTypeStudent],\n  );\n\n  function changeStudentTypes(content: string): void {\n    setFilterSelectedTypeStudent(content);\n  }\n\n  function clearUser(): void {\n    setSelectedStudent({\n      id: '',\n      full_name: '',\n      cpf: '',\n      date_of_birth: formatISO(new Date()),\n      active: false,\n      email: '',\n      phone: '',\n      password: '',\n      last_acess: '',\n      photo: '',\n      plan_type: '',\n      observation: '',\n    });\n  }\n\n  useEffect(() => {\n    filterUsers();\n  }, [filterSelectedTypeStudent]);\n\n  const { debounce } = useDebounce();\n\n  const handleToggleModalAddStudent = useCallback(() => {\n    clearUser();\n    setModalOpen(!modalOpen);\n  }, [modalOpen]);\n\n  const handleToggleModalConfirmation = useCallback(() => {\n    setModalConfirmationOpen(!modalConfirmationOpen);\n  }, [modalConfirmationOpen]);\n\n  const handleToggleActiveUser = useCallback(\n    async (id: string) => {\n      const findUser = users.find(student => student.id === id);\n\n      if (!findUser) {\n        return;\n      }\n      try {\n        await api.patch(`/users/change-active/${id}`, {\n          active: !findUser?.active,\n        });\n        setUsers(oldStudents =>\n          oldStudents.map(oldStudent =>\n            oldStudent.id === id\n              ? { ...oldStudent, active: !findUser.active }\n              : oldStudent,\n          ),\n        );\n        filterUsers();\n      } catch ({ err }) {\n        console.log(err);\n      }\n    },\n    [users],\n  );\n\n  return (\n    <>\n      <MenuBar />\n\n      <div id=\"mainContainer\">\n        <Header />\n        <Container>\n          <Button onClick={() => history.push('/dashboard')}>\n            <IoMdArrowRoundBack />\n          </Button>\n          <h2>Alunos</h2>\n          <Tabs\n            tabsApi={studentType}\n            setStudentTypeSelected={changeStudentTypes}\n          />\n\n          <ActionArea>\n            <SearchInput\n              placeholder=\"Pesquise por nome, sobrenome, e-mail ou CPF\"\n              name=\"search\"\n              onChange={event =>\n                debounce({\n                  internalFunction: filterUsers,\n                  event,\n                })\n              }\n            />\n            <Button onClick={() => handleToggleModalAddStudent()}>\n              CADASTRAR ALUNO\n            </Button>\n          </ActionArea>\n\n          <Main>\n            <HeaderContent>\n              <Result>{users.length} resultados</Result>\n            </HeaderContent>\n\n            {isLoading && <SkeletonContainerGrid />}\n\n            <ContainerCardsStudents>\n              {users.length && !isLoading && (\n                <>\n                  {users.map(user => (\n                    <CardStudent\n                      key={user.id}\n                      id={user.id}\n                      user={user}\n                      handleToggleActiveUser={() =>\n                        handleToggleActiveUser(user.id)\n                      }\n                      handleToggleDrawer={handleToggleModalAddStudent}\n                      handleToggleDeleteModal={handleToggleModalConfirmation}\n                      setSelectedStudent={setSelectedStudent}\n                    />\n                  ))}\n                </>\n              )}\n\n              {users.length === 0 && (\n                <ListStudentEmpty>\n                  Você não possui alunos cadastrados. Clique no botão\n                  &quot;Cadastrar Aluno&quot; para que eles sejam exibidos aqui!\n                </ListStudentEmpty>\n              )}\n            </ContainerCardsStudents>\n          </Main>\n\n          <ModalAddStudent\n            isOpen={modalOpen}\n            setIsOpen={handleToggleModalAddStudent}\n            updateStudents={updateStudents}\n            editUser={selectedStudent}\n            resetUser={handleResetUser}\n          />\n\n          <ModalConfirmationDeleteStudent\n            isOpen={modalConfirmationOpen}\n            setIsOpen={handleToggleModalConfirmation}\n            idUserSelected={selectedStudent.id}\n            updateUsers={updateStudents}\n          />\n        </Container>\n      </div>\n    </>\n  );\n};\n\nexport default Student;\n",["75","76","77","78","79"],"D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\pages\\Plans\\index.tsx",["80","81"],"D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\components\\Skeleton\\SpaceBetween\\index.tsx",[],"D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\components\\Drawer\\styles.ts",[],"D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\pages\\Exercises\\index.tsx",[],"D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\pages\\Exercises\\styles.ts",[],"D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\components\\ModalAddExercise\\index.tsx",["82"],"import React, { useCallback, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { MdFitnessCenter } from 'react-icons/md';\nimport { toast } from 'react-toastify';\nimport api from '../../services/api';\nimport ButtonRod from '../ButtonRod';\nimport Modal from '../Modal';\nimport { NewInput } from '../NewInput';\nimport * as S from './styles';\n\ninterface ExerciseProps {\n  exercise_group: string;\n  id: string;\n  link: string;\n  name: string;\n}\n\ninterface IModalProps {\n  isOpen: boolean;\n  setIsOpen: () => void;\n  exercise?: ExerciseProps;\n  clearData(): void;\n  loadExercises(): Promise<void>;\n}\n\nconst ModalExercise: React.FC<IModalProps> = ({\n  isOpen = false,\n  setIsOpen,\n  exercise,\n  clearData,\n  loadExercises,\n}) => {\n  const { register, handleSubmit, reset } = useForm();\n  const [defaultValues, setDefaultValues] = useState<ExerciseProps>(\n    {} as ExerciseProps,\n  );\n\n  const handleAddExercise = useCallback(\n    async (exerciseData: ExerciseProps): Promise<void> => {\n      try {\n        if (defaultValues.id) {\n          await api.put(`/exercises/${defaultValues.id}`, exerciseData);\n        } else {\n          await api.post('/exercises', exerciseData);\n        }\n        loadExercises();\n\n        toast.success(\n          `Exercício ${\n            defaultValues.id ? 'atualizado' : 'cadastrado'\n          } com sucesso!`,\n        );\n        setIsOpen();\n      } catch (error) {\n        toast.error(error.response.data.error);\n      }\n    },\n    [defaultValues.id, setIsOpen],\n  );\n\n  useEffect(() => {\n    if (exercise) {\n      setDefaultValues({ ...exercise });\n    }\n    reset(exercise);\n  }, [reset, exercise]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      setIsOpen={() => {\n        reset();\n        clearData();\n        setIsOpen();\n      }}\n    >\n      <S.ContainerModal>\n        <S.LogoAndTitleModal>\n          <MdFitnessCenter size={24} />\n          <p>Cadastrar Exercícios</p>\n        </S.LogoAndTitleModal>\n        <form onSubmit={handleSubmit(handleAddExercise)}>\n          <S.LabelAndInputArea>\n            <S.Label>Nome do Exercício</S.Label>\n            <NewInput\n              placeholder=\"Ex: Banco Tríceps''\"\n              {...register('name')}\n              defaultValue={defaultValues.name || ''}\n            />\n          </S.LabelAndInputArea>\n          <S.LabelAndInputArea>\n            <S.Label>Grupo de Exerício</S.Label>\n            <NewInput\n              type=\"text\"\n              placeholder=\"Tríceps\"\n              {...register('exercise_group')}\n              defaultValue={defaultValues.exercise_group || ''}\n            />\n          </S.LabelAndInputArea>\n          <S.LabelAndInputArea>\n            <S.Label>Link do Video</S.Label>\n\n            <NewInput\n              type=\"text\"\n              placeholder=\"Tríceps\"\n              {...register('link')}\n              defaultValue={defaultValues.link || ''}\n            />\n          </S.LabelAndInputArea>\n          <ButtonRod fullWidth heightSize=\"large\" type=\"submit\">\n            {defaultValues.id ? 'Editar' : 'Adicionar'} exercício\n          </ButtonRod>\n        </form>\n      </S.ContainerModal>\n    </Modal>\n  );\n};\n\nexport default ModalExercise;\n","D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\components\\ModalAddExercise\\styles.ts",[],"D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\components\\ModalAddStudent\\index.tsx",["83"],"D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\components\\Modal\\index.tsx",[],"D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\pages\\Training\\styles.ts",[],"D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\components\\ButtonIcon\\index.tsx",[],"D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\components\\NewInput\\styles.ts",[],"D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\components\\Skeleton\\Item\\index.tsx",[],"D:\\Dev\\ProjetosParalelos\\team-gleyce-web-app\\src\\components\\CircularProgress\\styles.ts",[],{"ruleId":"84","severity":1,"message":"85","line":138,"column":6,"nodeType":"86","endLine":138,"endColumn":33,"suggestions":"87"},{"ruleId":"84","severity":1,"message":"88","line":174,"column":5,"nodeType":"86","endLine":174,"endColumn":12,"suggestions":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":50,"column":11,"nodeType":"102","messageId":"103","endLine":50,"endColumn":40},{"ruleId":"84","severity":1,"message":"104","line":99,"column":6,"nodeType":"86","endLine":99,"endColumn":22,"suggestions":"105"},{"ruleId":"84","severity":1,"message":"106","line":58,"column":5,"nodeType":"86","endLine":58,"endColumn":34,"suggestions":"107"},{"ruleId":"84","severity":1,"message":"108","line":101,"column":5,"nodeType":"86","endLine":101,"endColumn":7,"suggestions":"109"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filterUsers'. Either include it or remove the dependency array.","ArrayExpression",["110"],"React Hook useCallback has a missing dependency: 'filterUsers'. Either include it or remove the dependency array.",["111"],"lines-around-directive",["112"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-unused-vars","'TrainingContextCompletedProps' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'listCompletedPlan'. Either include it or remove the dependency array.",["113"],"React Hook useCallback has a missing dependency: 'loadExercises'. Either include it or remove the dependency array. If 'loadExercises' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["114"],"React Hook useCallback has a missing dependency: 'updateStudents'. Either include it or remove the dependency array. If 'updateStudents' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["115"],{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},"padding-line-between-statements",{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},"Update the dependencies array to be: [filterSelectedTypeStudent, filterUsers]",{"range":"126","text":"127"},"Update the dependencies array to be: [filterUsers, users]",{"range":"128","text":"129"},"Update the dependencies array to be: [listCompletedPlan, tabPlanContext]",{"range":"130","text":"131"},"Update the dependencies array to be: [defaultValues.id, loadExercises, setIsOpen]",{"range":"132","text":"133"},"Update the dependencies array to be: [updateStudents]",{"range":"134","text":"135"},[4025,4052],"[filterSelectedTypeStudent, filterUsers]",[4981,4988],"[filterUsers, users]",[2512,2528],"[listCompletedPlan, tabPlanContext]",[1496,1525],"[defaultValues.id, loadExercises, setIsOpen]",[2620,2622],"[updateStudents]"]